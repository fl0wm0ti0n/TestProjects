// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using JSON_Deserealising_Test;
//
//    var node = Node.FromJson(jsonString);

using System;
using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using J = Newtonsoft.Json.JsonPropertyAttribute;
using R = Newtonsoft.Json.Required;
using N = Newtonsoft.Json.NullValueHandling;

namespace JSON_Deserealising_Test
{

    public partial class Node
    {
        [J("id")] public long Id { get; set; }
        [J("node_id")] public string NodeId { get; set; }
        [J("node_id_v1")] public string NodeIdV1 { get; set; }
        [J("farm_id")] public long FarmId { get; set; }
        [J("os_version")] public string OsVersion { get; set; }
        [J("created")] public long Created { get; set; }
        [J("updated")] public long Updated { get; set; }
        [J("uptime")] public long Uptime { get; set; }
        [J("address")] public string Address { get; set; }
        [J("location")] public NodeLocation Location { get; set; }
        [J("total_resources")] public Resources TotalResources { get; set; }
        [J("used_resources")] public Resources UsedResources { get; set; }
        [J("reserved_resources")] public Resources ReservedResources { get; set; }
        [J("proofs")] public object Proofs { get; set; }
        [J("ifaces")] public List<Iface> Ifaces { get; set; }
        [J("public_config")] public object PublicConfig { get; set; }
        [J("free_to_use")] public bool FreeToUse { get; set; }
        [J("approved")] public bool Approved { get; set; }
        [J("public_key_hex")] public string PublicKeyHex { get; set; }
        [J("wg_ports")] public object WgPorts { get; set; }
    }

    public class Iface
    {
        [J("name")] public string Name { get; set; }
        [J("addrs")] public List<string> Addrs { get; set; }
        [J("gateway")] public List<string> Gateway { get; set; }
        [J("macaddress")] public string Macaddress { get; set; }
    }

    public class NodeLocation
    {
        [J("city")] public string CityNode { get; set; }
        [J("country")] public string CountryNode { get; set; }
        [J("continent")] public string ContinentNode { get; set; }
        [J("latitude")] public double LatitudeNode { get; set; }
        [J("longitude")] public double LongitudeNode { get; set; }
    }

    public partial class Resources
    {
        [J("cru")] public long Cru { get; set; }
        [J("mru")] public long Mru { get; set; }
        [J("hru")] public long Hru { get; set; }
        [J("sru")] public long Sru { get; set; }
    }

    public partial class Node
    {
        public static Node FromJson(string json) => JsonConvert.DeserializeObject<Node>(json, FarmConverter.Settings);
    }

    public partial class Node
    {
        public static List<Node> FromJsonList(string jsonList) => JsonConvert.DeserializeObject<List<Node>>(jsonList, FarmConverter.Settings);
    }

    public static class NodeSerialize
    {
        public static string ToJson(this Node self) => JsonConvert.SerializeObject(self, FarmConverter.Settings);
    }

    internal static class NodeConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}